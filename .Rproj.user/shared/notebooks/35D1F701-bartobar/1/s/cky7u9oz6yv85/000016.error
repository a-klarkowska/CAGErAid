{"frames":[{"func":"exportToTrack(ce_no, \"consensusClusters\", qLow = 0.1, qUp = 0.9)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"exportToTrack(ce_no, \"consensusClusters\", qLow = 0.1, qUp = 0.9)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"exportToTrack(clusters, qLow = qLow, qUp = qUp, colorByExpressionProfile = colorByExpressionProfile, \n    oneTrack = oneTrack)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"exportToTrack(clusters, qLow = qLow, qUp = qUp, colorByExpressionProfile = colorByExpressionProfile, \n    oneTrack = oneTrack)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"exportToTrack(GRanges(object), qLow = qLow, qUp = qUp, colorByExpressionProfile = colorByExpressionProfile, \n    oneTrack = oneTrack)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"exportToTrack(GRanges(object), qLow = qLow, qUp = qUp, colorByExpressionProfile = colorByExpressionProfile, \n    oneTrack = oneTrack)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"rbind(width(object), decode(mcols(object)[, paste0(\"q_\", qLow)]), \n    decode(mcols(object)[, paste0(\"q_\", qUp)]))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"standardGeneric(\"rbind\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(quote(list(...)), env)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(quote(list(...)), env)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(quote(list(...)), env)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"decode(mcols(object)[, paste0(\"q_\", qLow)])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mcols(object)[, paste0(\"q_\", qLow)]","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mcols(object)[, paste0(\"q_\", qLow)]","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"extractCOLS(x, j)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"extractCOLS(x, j)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"normalizeSingleBracketSubscript(i, xstub)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"NSBS(i, x, exact = exact, strict.upper.bound = !allow.append, \n    allow.NAs = allow.NAs)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"NSBS(i, x, exact = exact, strict.upper.bound = !allow.append, \n    allow.NAs = allow.NAs)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".subscript_error(\"subscript contains invalid \", what)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(wmsg(...), call. = FALSE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".handleSimpleError(function (cond) \n.Internal(C_tryCatchHelper(addr, 1L, cond)), \"subscript contains invalid names\", \n    base::quote(NULL))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"h(simpleError(msg, call))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in h(simpleError(msg, call)) : \n  error in evaluating the argument 'x' in selecting a method for function 'decode': subscript contains invalid names\n"}